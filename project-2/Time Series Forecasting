
Steps to Tackle a Time Series Problem (with Codes in Python)Â¶
Note: These are just the codes from article

Loading and Handling TS in Pandas
In [1]:
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
%matplotlib inline
from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 15, 6
In [2]:
#Note: aim is not to teach stock price forecasting. It's a very complex domain and I have almost no clue about it. Here I will demonstrate the various techniques which can be used for time-series forecasting
data = pd.read_csv('AirPassengers.csv')
print (data.head())
print( '\n Data Types:')
print(data.dtypes)
     Month  #Passengers
0  1949-01          112
1  1949-02          118
2  1949-03          132
3  1949-04          129
4  1949-05          121

 Data Types:
Month          object
#Passengers     int64
dtype: object
Reading as datetime format:

In [3]:
dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m')
# dateparse('1962-01')
data = pd.read_csv('AirPassengers.csv', parse_dates=['Month'], index_col='Month',date_parser=dateparse)
print (data.head())
            #Passengers
Month                  
1949-01-01          112
1949-02-01          118
1949-03-01          132
1949-04-01          129
1949-05-01          121
<ipython-input-3-f468c0f22808>:1: FutureWarning: The pandas.datetime class is deprecated and will be removed from pandas in a future version. Import from datetime module instead.
  dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m')
In [4]:
#check datatype of index
data.index
Out[4]:
DatetimeIndex(['1949-01-01', '1949-02-01', '1949-03-01', '1949-04-01',
               '1949-05-01', '1949-06-01', '1949-07-01', '1949-08-01',
               '1949-09-01', '1949-10-01',
               ...
               '1960-03-01', '1960-04-01', '1960-05-01', '1960-06-01',
               '1960-07-01', '1960-08-01', '1960-09-01', '1960-10-01',
               '1960-11-01', '1960-12-01'],
              dtype='datetime64[ns]', name='Month', length=144, freq=None)
In [5]:
data.info()
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 144 entries, 1949-01-01 to 1960-12-01
Data columns (total 1 columns):
 #   Column       Non-Null Count  Dtype
---  ------       --------------  -----
 0   #Passengers  144 non-null    int64
dtypes: int64(1)
memory usage: 2.2 KB
In [6]:
#convert to time series:
ts = data['#Passengers']
ts.head(10)
Out[6]:
Month
1949-01-01    112
1949-02-01    118
1949-03-01    132
1949-04-01    129
1949-05-01    121
1949-06-01    135
1949-07-01    148
1949-08-01    148
1949-09-01    136
1949-10-01    119
Name: #Passengers, dtype: int64
Indexing TS arrays:
In [7]:
#1. Specific the index as a string constant:
ts['1949-01-01']
Out[7]:
112
In [8]:
#2. Import the datetime library and use 'datetime' function:
from datetime import datetime
ts[datetime(1949,1,1)]
Out[8]:
112
Get range:
In [9]:
#1. Specify the entire range:
ts['1949-01-01':'1949-05-01']
Out[9]:
Month
1949-01-01    112
1949-02-01    118
1949-03-01    132
1949-04-01    129
1949-05-01    121
Name: #Passengers, dtype: int64
In [10]:
#2. Use ':' if one of the indices is at ends:
ts[:'1949-05-01']
Out[10]:
Month
1949-01-01    112
1949-02-01    118
1949-03-01    132
1949-04-01    129
1949-05-01    121
Name: #Passengers, dtype: int64
Note: ends included here

In [11]:
#All rows of 1962:
ts['1949']
Out[11]:
Month
1949-01-01    112
1949-02-01    118
1949-03-01    132
1949-04-01    129
1949-05-01    121
1949-06-01    135
1949-07-01    148
1949-08-01    148
1949-09-01    136
1949-10-01    119
1949-11-01    104
1949-12-01    118
Name: #Passengers, dtype: int64
Checking for stationarity
Plot the time-series
In [12]:
plt.figure(figsize=(10,4))
plt.plot(ts)
Out[12]:
[<matplotlib.lines.Line2D at 0x19421ec88b0>]

Function for testing stationarity
In [13]:
from statsmodels.tsa.stattools import adfuller
def test_stationarity(timeseries):
    
    #Determing rolling statistics
    rolmean = timeseries.rolling(window=12).mean()
    rolstd = timeseries.rolling(window=12).std()

    #Plot rolling statistics:
    plt.figure(figsize=(12,5))
    orig = plt.plot(timeseries, color='blue',label='Original')
    mean = plt.plot(rolmean, color='red', label='Rolling Mean')
    std = plt.plot(rolstd, color='black', label = 'Rolling Std')
    plt.legend(loc='best')
    plt.title('Rolling Mean & Standard Deviation')
    plt.show(block=False)
    
    #Perform Dickey-Fuller test:
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
        dfoutput['Critical Value (%s)'%key] = value
    print(dfoutput)
In [14]:
test_stationarity(ts)

Results of Dickey-Fuller Test:
Test Statistic                   0.815369
p-value                          0.991880
#Lags Used                      13.000000
Number of Observations Used    130.000000
Critical Value (1%)             -3.481682
Critical Value (5%)             -2.884042
Critical Value (10%)            -2.578770
dtype: float64
Making TS Stationary
Estimating & Eliminating Trend
In [15]:
ts_log = np.log(ts)
plt.plot(ts_log)
Out[15]:
[<matplotlib.lines.Line2D at 0x19424028730>]

Smoothing:
Moving average
In [16]:
moving_avg = ts_log.rolling(window=12).mean()
plt.plot(ts_log)
plt.plot(moving_avg, color='red')
Out[16]:
[<matplotlib.lines.Line2D at 0x194248b6b20>]

In [17]:
ts_log_moving_avg_diff = ts_log - moving_avg
ts_log_moving_avg_diff.head(12)
Out[17]:
Month
1949-01-01         NaN
1949-02-01         NaN
1949-03-01         NaN
1949-04-01         NaN
1949-05-01         NaN
1949-06-01         NaN
1949-07-01         NaN
1949-08-01         NaN
1949-09-01         NaN
1949-10-01         NaN
1949-11-01         NaN
1949-12-01   -0.065494
Name: #Passengers, dtype: float64
In [18]:
ts_log_moving_avg_diff.dropna(inplace=True)
ts_log_moving_avg_diff.head()
Out[18]:
Month
1949-12-01   -0.065494
1950-01-01   -0.093449
1950-02-01   -0.007566
1950-03-01    0.099416
1950-04-01    0.052142
Name: #Passengers, dtype: float64
In [19]:
test_stationarity(ts_log_moving_avg_diff)

Results of Dickey-Fuller Test:
Test Statistic                  -3.162908
p-value                          0.022235
#Lags Used                      13.000000
Number of Observations Used    119.000000
Critical Value (1%)             -3.486535
Critical Value (5%)             -2.886151
Critical Value (10%)            -2.579896
dtype: float64
Exponentially Weighted Moving Average
In [20]:
expwighted_avg = ts_log.ewm(halflife=12).mean()
plt.plot(ts_log)
plt.plot(expwighted_avg, color='red')
# expwighted_avg.plot(style='k--')

#df.ewm(com=0.5).mean()
Out[20]:
[<matplotlib.lines.Line2D at 0x19424c44b20>]

In [21]:
expwighted_avg
Out[21]:
Month
1949-01-01    4.718499
1949-02-01    4.745345
1949-03-01    4.793835
1949-04-01    4.811785
1949-05-01    4.808206
                ...   
1960-08-01    6.046445
1960-09-01    6.056778
1960-10-01    6.061079
1960-11-01    6.055750
1960-12-01    6.056461
Name: #Passengers, Length: 144, dtype: float64
In [22]:
ts_log
Out[22]:
Month
1949-01-01    4.718499
1949-02-01    4.770685
1949-03-01    4.882802
1949-04-01    4.859812
1949-05-01    4.795791
                ...   
1960-08-01    6.406880
1960-09-01    6.230481
1960-10-01    6.133398
1960-11-01    5.966147
1960-12-01    6.068426
Name: #Passengers, Length: 144, dtype: float64
In [23]:
ts_log_ewma_diff = ts_log - expwighted_avg
test_stationarity(ts_log_ewma_diff)

Results of Dickey-Fuller Test:
Test Statistic                  -3.601262
p-value                          0.005737
#Lags Used                      13.000000
Number of Observations Used    130.000000
Critical Value (1%)             -3.481682
Critical Value (5%)             -2.884042
Critical Value (10%)            -2.578770
dtype: float64
Eliminating Trend and Seasonality
Differencing:
In [24]:
#Take first difference:
plt.figure(figsize=(10,5))
ts_log_diff = ts_log - ts_log.shift()
plt.plot(ts_log_diff)
Out[24]:
[<matplotlib.lines.Line2D at 0x19424ca9880>]

In [25]:
plt.figure(figsize=(12,6))
ts_log_diff.dropna(inplace=True)
test_stationarity(ts_log_diff)
<Figure size 864x432 with 0 Axes>

Results of Dickey-Fuller Test:
Test Statistic                  -2.717131
p-value                          0.071121
#Lags Used                      14.000000
Number of Observations Used    128.000000
Critical Value (1%)             -3.482501
Critical Value (5%)             -2.884398
Critical Value (10%)            -2.578960
dtype: float64
Decomposition:
In [26]:
from statsmodels.tsa.seasonal import seasonal_decompose
decomposition = seasonal_decompose(ts_log)

trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.figure(figsize=(10,5))
plt.subplot(411)
plt.plot(ts_log, label='Original')
plt.legend(loc='best')
plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='best')
plt.subplot(413)
plt.plot(seasonal,label='Seasonality')
plt.legend(loc='best')
plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='best')
plt.tight_layout()

In [27]:
plt.figure(figsize=(12,5))
ts_log_decompose = residual
ts_log_decompose.dropna(inplace=True)
test_stationarity(ts_log_decompose)
<Figure size 864x360 with 0 Axes>

Results of Dickey-Fuller Test:
Test Statistic                -6.332387e+00
p-value                        2.885059e-08
#Lags Used                     9.000000e+00
Number of Observations Used    1.220000e+02
Critical Value (1%)           -3.485122e+00
Critical Value (5%)           -2.885538e+00
Critical Value (10%)          -2.579569e+00
dtype: float64
Final Forecasting
In [28]:
from statsmodels.tsa.arima_model import ARIMA
ACF & PACF Plots
In [29]:
#ACF and PACF plots:
from statsmodels.tsa.stattools import acf, pacf  

lag_acf = acf(ts_log_diff, nlags=20)
lag_pacf = pacf(ts_log_diff, nlags=20, method='ols')

#Plot ACF:  
#plt.figure(figsize=(10,5))
plt.subplot(121)    
plt.plot(lag_acf)
plt.axhline(y=0,linestyle='--',color='gray')
plt.axhline(y=-1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')
plt.axhline(y=1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')
plt.title('Autocorrelation Function')

#Plot PACF:
#plt.figure(figsize=(10,5))
plt.subplot(122)
plt.plot(lag_pacf)
plt.axhline(y=0,linestyle='--',color='gray')
plt.axhline(y=-1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')
plt.axhline(y=1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')
plt.title('Partial Autocorrelation Function')
plt.tight_layout()
C:\Users\vrajd\anaconda3\lib\site-packages\statsmodels\tsa\stattools.py:568: FutureWarning: fft=True will become the default in a future version of statsmodels. To suppress this warning, explicitly set fft=False.
  warnings.warn(

AR Model:
In [30]:
#MA model:
model = ARIMA(ts_log, order=(2, 1, 0))  
results_AR = model.fit(disp=-1)  
plt.figure(figsize=(12,6))
plt.plot(ts_log_diff)
plt.plot(results_AR.fittedvalues, color='red')
plt.title('RSS: %.4f'% sum((results_AR.fittedvalues-ts_log_diff)**2))
C:\Users\vrajd\anaconda3\lib\site-packages\statsmodels\tsa\base\tsa_model.py:159: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  warnings.warn('No frequency information was'
C:\Users\vrajd\anaconda3\lib\site-packages\statsmodels\tsa\base\tsa_model.py:159: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  warnings.warn('No frequency information was'
Out[30]:
Text(0.5, 1.0, 'RSS: 1.5023')

MA Model
In [31]:
model = ARIMA(ts_log, order=(0, 1, 2))  
results_MA = model.fit(disp=-1)  
plt.figure(figsize=(12,5))
plt.plot(ts_log_diff)
plt.plot(results_MA.fittedvalues, color='red')
plt.title('RSS: %.4f'% sum((results_MA.fittedvalues-ts_log_diff)**2))
C:\Users\vrajd\anaconda3\lib\site-packages\statsmodels\tsa\base\tsa_model.py:159: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  warnings.warn('No frequency information was'
C:\Users\vrajd\anaconda3\lib\site-packages\statsmodels\tsa\base\tsa_model.py:159: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  warnings.warn('No frequency information was'
Out[31]:
Text(0.5, 1.0, 'RSS: 1.4721')

ARIMA Model:
In [32]:
model = ARIMA(ts_log, order=(2, 1, 2))  
results_ARIMA = model.fit(disp=-1)  

plt.figure(figsize=(12,5))
plt.plot(ts_log_diff)
plt.plot(results_ARIMA.fittedvalues, color='red')
plt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues-ts_log_diff)**2))
C:\Users\vrajd\anaconda3\lib\site-packages\statsmodels\tsa\base\tsa_model.py:159: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  warnings.warn('No frequency information was'
C:\Users\vrajd\anaconda3\lib\site-packages\statsmodels\tsa\base\tsa_model.py:159: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  warnings.warn('No frequency information was'
Out[32]:
Text(0.5, 1.0, 'RSS: 1.0292')

Convert to original scale:
In [33]:
predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)
print (predictions_ARIMA_diff.head())
Month
1949-02-01    0.009580
1949-03-01    0.017491
1949-04-01    0.027670
1949-05-01   -0.004521
1949-06-01   -0.023890
dtype: float64
In [34]:
predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()
print (predictions_ARIMA_diff_cumsum.head())
Month
1949-02-01    0.009580
1949-03-01    0.027071
1949-04-01    0.054742
1949-05-01    0.050221
1949-06-01    0.026331
dtype: float64
In [35]:
predictions_ARIMA_log = pd.Series(ts_log.iloc[0], index=ts_log.index)
predictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)
predictions_ARIMA_log.head()
Out[35]:
Month
1949-01-01    4.718499
1949-02-01    4.728079
1949-03-01    4.745570
1949-04-01    4.773241
1949-05-01    4.768720
dtype: float64
In [36]:
predictions_ARIMA_log.head(10)
Out[36]:
Month
1949-01-01    4.718499
1949-02-01    4.728079
1949-03-01    4.745570
1949-04-01    4.773241
1949-05-01    4.768720
1949-06-01    4.744830
1949-07-01    4.740483
1949-08-01    4.729506
1949-09-01    4.699577
1949-10-01    4.665109
dtype: float64
In [37]:
ts_log.head(10)
Out[37]:
Month
1949-01-01    4.718499
1949-02-01    4.770685
1949-03-01    4.882802
1949-04-01    4.859812
1949-05-01    4.795791
1949-06-01    4.905275
1949-07-01    4.997212
1949-08-01    4.997212
1949-09-01    4.912655
1949-10-01    4.779123
Name: #Passengers, dtype: float64
In [38]:
plt.figure(figsize=(12,5))
plt.plot(ts_log)
plt.plot(predictions_ARIMA_log)
Out[38]:
[<matplotlib.lines.Line2D at 0x194253d6580>]

In [39]:
predictions_ARIMA = np.exp(predictions_ARIMA_log)

plt.figure(figsize=(12,5))
plt.plot(ts)
plt.plot(predictions_ARIMA)
plt.title('RMSE: %.4f'% np.sqrt(sum((predictions_ARIMA-ts)**2)/len(ts)))
Out[39]:
Text(0.5, 1.0, 'RMSE: 90.1051')

In [40]:
predictions_ARIMA
Out[40]:
Month
1949-01-01    112.000000
1949-02-01    113.078121
1949-03-01    115.073412
1949-04-01    118.301980
1949-05-01    117.768356
                 ...    
1960-08-01    441.884321
1960-09-01    402.904003
1960-10-01    366.751796
1960-11-01    341.983249
1960-12-01    339.215299
Length: 144, dtype: float64
In [41]:
data
Out[41]:
#Passengers
Month	
1949-01-01	112
1949-02-01	118
1949-03-01	132
1949-04-01	129
1949-05-01	121
...	...
1960-08-01	606
1960-09-01	508
1960-10-01	461
1960-11-01	390
1960-12-01	432
144 rows Ã 1 columns

In [42]:
results_ARIMA.plot_predict(1,384)
Out[42]:


In [43]:
results_ARIMA.plot_predict(1,156)
Out[43]:


In [44]:
x=results_ARIMA.forecast(steps=156)
In [45]:
x
Out[45]:
(array([6.09553403, 6.15281417, 6.22442976, 6.29241101, 6.34164703,
        6.36359337, 6.35784655, 6.33139273, 6.29597515, 6.26447697,
        6.24738317, 6.25025168, 6.27275833, 6.30940304, 6.35151476,
        6.38988629, 6.41727346, 6.43011015, 6.4290665 , 6.41842453,
        6.40456125, 6.39403592, 6.39183063, 6.40019484, 6.4183367 ,
        6.4429538 , 6.469374  , 6.49293944, 6.51024072, 6.51988985,
        6.52267532, 6.52112343, 6.51864487, 6.51853654, 6.52311888,
        6.53322325, 6.54812831, 6.56591514, 6.5841026 , 6.60036486,
        6.6131321 , 6.62192724, 6.62737732, 6.63093075, 6.63438637,
        6.63937935, 6.64696455, 6.6573979 , 6.67015271, 6.68414193,
        6.69806565, 6.71077836, 6.72157665, 6.73033917, 6.73749744,
        6.74386313, 6.75037259, 6.75782529, 6.76668618, 6.77699757,
        6.78841251, 6.80032782, 6.81207121, 6.82308684, 6.83307059,
        6.84202414, 6.85022234, 6.85811144, 6.86617263, 6.87479074,
        6.88416224, 6.89426304, 6.90487808, 6.91567854, 6.9263211 ,
        6.93654052, 6.94621178, 6.95536848, 6.96417719, 6.97287923,
        6.9817188 , 6.99087784, 7.00043437, 7.01035271, 7.02050496,
        7.03071465, 7.04080869, 7.05066289, 7.06022981, 7.06954323,
        7.0787006 , 7.08783053, 7.09705531, 7.10645921, 7.11607006,
        7.12585789, 7.13574889, 7.14564969, 7.15547417, 7.16516552,
        7.17470825, 7.18412792, 7.19348007, 7.20283226, 7.21224496,
        7.22175617, 7.23137377, 7.24107658, 7.25082305, 7.26056442,
        7.27025842, 7.27987982, 7.28942531, 7.29891205, 7.30837099,
        7.31783719, 7.3273401 , 7.3368963 , 7.3465065 , 7.35615701,
        7.36582489, 7.37548499, 7.38511691, 7.39470984, 7.40426449,
        7.41379162, 7.42330818, 7.43283212, 7.44237755, 7.45195139,
        7.46155229, 7.47117186, 7.48079765, 7.49041686, 7.50001981,
        7.50960212, 7.51916537, 7.52871603, 7.53826322, 7.54781603,
        7.55738108, 7.56696106, 7.57655443, 7.58615622, 7.59575979,
        7.6053587 , 7.61494844, 7.62452741, 7.63409703, 7.64366104,
        7.6532243 , 7.66279133, 7.6723652 , 7.68194681, 7.69153495,
        7.70112676]),
 array([0.08384711, 0.10749462, 0.11568694, 0.11702774, 0.11703496,
        0.11744017, 0.11762249, 0.11778713, 0.12024161, 0.12736039,
        0.13870954, 0.15118785, 0.16157805, 0.16834386, 0.1717732 ,
        0.17311973, 0.17358723, 0.1738545 , 0.17430208, 0.17543322,
        0.17788137, 0.18195711, 0.18726205, 0.1928338 , 0.19769231,
        0.20130625, 0.20369041, 0.20519818, 0.20625255, 0.20720985,
        0.20836957, 0.21000312, 0.21229729, 0.21524463, 0.21860163,
        0.22198239, 0.22503047, 0.22755277, 0.22954789, 0.2311478 ,
        0.23253808, 0.23390517, 0.23541292, 0.23718294, 0.2392652 ,
        0.24161519, 0.24410352, 0.24656337, 0.24885236, 0.25089609,
        0.25269713, 0.25431608, 0.25584292, 0.25737208, 0.25898369,
        0.26072829, 0.26261527, 0.26461068, 0.26664876, 0.26865459,
        0.27056826, 0.27236074, 0.27403679, 0.27562751, 0.27717806,
        0.27873504, 0.28033568, 0.28199995, 0.28372659, 0.28549486,
        0.28727186, 0.28902321, 0.29072312, 0.29236058, 0.29394016,
        0.29547851, 0.29699844, 0.29852251, 0.30006755, 0.30164102,
        0.30323988, 0.30485242, 0.30646229, 0.30805358, 0.30961514,
        0.31114311, 0.31264097, 0.31411769, 0.31558477, 0.31705299,
        0.3185298 , 0.32001774, 0.32151429, 0.3230131 , 0.32450607,
        0.32598584, 0.32744766, 0.32889038, 0.33031637, 0.33173043,
        0.33313833, 0.33454516, 0.33595418, 0.33736609, 0.3387792 ,
        0.34019015, 0.34159498, 0.34299028, 0.34437409, 0.34574624,
        0.3471082 , 0.34846255, 0.34981214, 0.35115939, 0.35250567,
        0.35385108, 0.35519461, 0.35653448, 0.3578688 , 0.35919601,
        0.36051533, 0.36182689, 0.36313158, 0.36443074, 0.36572581,
        0.36701791, 0.36830762, 0.36959487, 0.37087909, 0.37215936,
        0.37343478, 0.37470467, 0.37596875, 0.37722718, 0.37848048,
        0.37972937, 0.38097456, 0.38221656, 0.38345563, 0.38469168,
        0.3859244 , 0.38715333, 0.38837805, 0.38959827, 0.39081392,
        0.39202513, 0.3932322 , 0.39443552, 0.39563543, 0.39683219,
        0.39802589, 0.39921648, 0.40040379, 0.40158761, 0.40276775,
        0.4039441 ]),
 array([[5.93119671, 6.25987136],
        [5.94212859, 6.36349975],
        [5.99768752, 6.451172  ],
        [6.06304085, 6.52178117],
        [6.11226273, 6.57103134],
        [6.13341487, 6.59377188],
        [6.1273107 , 6.5883824 ],
        [6.10053421, 6.56225126],
        [6.06030592, 6.53164438],
        [6.01485519, 6.51409875],
        [5.97551746, 6.51924888],
        [5.95392893, 6.54657443],
        [5.95607116, 6.58944549],
        [5.97945514, 6.63935093],
        [6.01484548, 6.68818404],
        [6.05057785, 6.72919473],
        [6.07704874, 6.75749819],
        [6.08936159, 6.77085871],
        [6.0874407 , 6.7706923 ],
        [6.07458174, 6.76226732],
        [6.05592017, 6.75320233],
        [6.03740654, 6.7506653 ],
        [6.02480376, 6.7588575 ],
        [6.02224755, 6.77814214],
        [6.0308669 , 6.8058065 ],
        [6.0484008 , 6.8375068 ],
        [6.07014814, 6.86859987],
        [6.09075839, 6.89512049],
        [6.10599316, 6.91448829],
        [6.11376602, 6.92601369],
        [6.11427846, 6.93107217],
        [6.10952488, 6.93272199],
        [6.10254982, 6.93473992],
        [6.09666482, 6.94040825],
        [6.09466756, 6.9515702 ],
        [6.09814575, 6.96830075],
        [6.10707669, 6.98917993],
        [6.1199199 , 7.01191038],
        [6.134197  , 7.03400819],
        [6.14732349, 7.05340623],
        [6.15736584, 7.06889836],
        [6.16348154, 7.08037294],
        [6.16597647, 7.08877818],
        [6.16606073, 7.09580077],
        [6.16543521, 7.10333754],
        [6.16582228, 7.11293642],
        [6.16853045, 7.12539865],
        [6.17414257, 7.14065323],
        [6.18241104, 7.15789437],
        [6.19239463, 7.17588924],
        [6.20278837, 7.19334292],
        [6.21232801, 7.20922871],
        [6.22013375, 7.22301956],
        [6.22589917, 7.23477917],
        [6.22989873, 7.24509615],
        [6.23284507, 7.25488119],
        [6.23565612, 7.26508905],
        [6.23919789, 7.27645269],
        [6.2440642 , 7.28930815],
        [6.25044426, 7.30355089],
        [6.25810846, 7.31871655],
        [6.26651058, 7.33414507],
        [6.27496898, 7.34917344],
        [6.28286685, 7.36330683],
        [6.28981156, 7.37632961],
        [6.29571351, 7.38833477],
        [6.30077451, 7.39967018],
        [6.3054017 , 7.41082117],
        [6.31007874, 7.42226652],
        [6.31523109, 7.43435038],
        [6.32111974, 7.44720475],
        [6.32778796, 7.46073812],
        [6.33507123, 7.47468492],
        [6.34266233, 7.48869475],
        [6.35020898, 7.50243323],
        [6.35741328, 7.51566776],
        [6.36410554, 7.52831802],
        [6.37027512, 7.54046185],
        [6.37605559, 7.55229879],
        [6.3816737 , 7.56408476],
        [6.38737956, 7.57605804],
        [6.39337808, 7.5883776 ],
        [6.39977931, 7.60108943],
        [6.40657879, 7.61412662],
        [6.41367043, 7.62733948],
        [6.42088537, 7.64054394],
        [6.42804365, 7.65357372],
        [6.43500353, 7.66632225],
        [6.44169504, 7.67876459],
        [6.44813079, 7.69095566],
        [6.45439367, 7.70300754],
        [6.46060728, 7.71505377],
        [6.46689887, 7.72721175],
        [6.47336517, 7.73955324],
        [6.48004985, 7.75209028],
        [6.48693738, 7.76477839],
        [6.49396327, 7.7775345 ],
        [6.50103639, 7.790263  ],
        [6.50806599, 7.80288236],
        [6.51498582, 7.81534522],
        [6.52176912, 7.82764737],
        [6.52843145, 7.83982439],
        [6.53502198, 7.85193815],
        [6.54160688, 7.86405764],
        [6.54824992, 7.87624   ],
        [6.55499572, 7.88851662],
        [6.56185992, 7.90088763],
        [6.56882799, 7.91332518],
        [6.57586224, 7.92578387],
        [6.58291424, 7.93821459],
        [6.58993885, 7.950578  ],
        [6.59690578, 7.96285387],
        [6.6038061 , 7.97504451],
        [6.61065228, 7.98717181],
        [6.61747257, 7.9992694 ],
        [6.62430182, 8.01137257],
        [6.63117146, 8.02350873],
        [6.63810155, 8.03569105],
        [6.64509655, 8.04791646],
        [6.65214578, 8.06016825],
        [6.65922782, 8.07242195],
        [6.66631732, 8.08465267],
        [6.6733921 , 8.09684172],
        [6.68043872, 8.10898097],
        [6.68745507, 8.12107391],
        [6.69444973, 8.13313351],
        [6.70143851, 8.14517785],
        [6.70843948, 8.15722476],
        [6.7154679 , 8.1692872 ],
        [6.72253245, 8.18137033],
        [6.72963356, 8.19347102],
        [6.73676419, 8.20557952],
        [6.74391243, 8.21768286],
        [6.75106518, 8.22976855],
        [6.7582117 , 8.24182792],
        [6.76534623, 8.25385801],
        [6.77246896, 8.26586178],
        [6.77958533, 8.27784673],
        [6.78670399, 8.28982245],
        [6.79383418, 8.30179787],
        [6.80098316, 8.313779  ],
        [6.80815448, 8.32576764],
        [6.81534744, 8.33776142],
        [6.82255763, 8.34975481],
        [6.82977858, 8.361741  ],
        [6.83700356, 8.37371384],
        [6.84422749, 8.3856694 ],
        [6.851448  , 8.39760682],
        [6.85866584, 8.40952822],
        [6.86588425, 8.42143783],
        [6.8731079 , 8.4333407 ],
        [6.88034142, 8.44524125],
        [6.88758819, 8.45714221],
        [6.89484956, 8.46904407],
        [6.90212466, 8.48094523],
        [6.90941088, 8.49284264]]))
